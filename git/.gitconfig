# Git configuration options
# https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig
# https://git-scm.com/book/tr/v2/Customizing-Git-Git-Configuration
# http://git-scm.com/docs/git-config.html

[include]
	# For username / github token / etc
	path = ~/.gitconfig_local

[apply]
	whitespace = nowarn

[log]
	date = format-local:%Y-%m-%d %H:%M:%S

[status]
	# Include submodule status in git status
	# https://medium.com/@porteneuve/mastering-git-submodules-34c65e940407#.3hgqh9tul
	submoduleSummary = true

[merge]
	# Linux UI merge tool
	tool = meld
	# Include summaries of merged commits in newly created merge commit messages
	# log = true

[mergetool]
	# No backup files (rm *.orig)
	keepBackup = false

[rerere]
	# REplay REsolved conflict during REbase
	# https://medium.com/@porteneuve/fix-conflicts-only-once-with-git-rerere-7d116b2cec67
	enabled = true

[rebase]
	# https://robots.thoughtbot.com/autosquashing-git-commits
	autosquash = true

[pull]
	# pull with --rebase
	rebase = true

[push]
	# `git push` without remote and branch will push the current branch to its upstream branch.
	# Refuses to push if the upstream branch's name is different from the local one.
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true

[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	# Make `git rebase` safer on OS X
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

[diff]
	# Detect copies as well as renames
	renames = copies

[diff "bin"]
	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C


# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

# Colors
[color]
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	commit = green bold
	frag = magenta bold
	old = red bold
	new = green bold
	whitespace = red reverse
[color "status"]
	added = yellow
	changed = green
	untracked = cyan
[color "diff-highlight"]
	oldNormal = "red bold"
	oldHighlight = "red bold 52"
	newNormal = "green bold"
	newHighlight = "green bold 22"
[color "grep"]
	linenumber = green
	match = red
	filename = magenta

[alias]
	####################################
	# Unmatched aliases
	####################################
	cl = clone

	####################################
	# Log aliases
	####################################
	# Pretty printed log
	logpretty = log --pretty=custom
	lg = !git logpretty
	# Show pretty printed commit log with branch graph
	loggraph = log --graph --pretty=custom
	lgg = !git loggraph
	# Show pretty printed commit log with files
	logfiles = log --pretty=custom --numstat --decorate --name-status
	lgf = !git logfiles
	# Show pretty printed commit log with diffs.
	# So much better than git blame.
	# http://blog.andrewray.me/a-better-git-blame/
	logdiff = log -M --follow --stat --pretty=custom -p --color-words
	lgd = !git logdiff

	####################################
	# Status aliases
	####################################
	# Shorter version
	statusshort = status -s
	st = !git statusshort

	####################################
	# Commit aliases
	####################################
	# Shorter version
	cm = commit -av
	cp = cherry-pick
	# Commit all changes
	commitall = !git add -A && git commit -av
	cma = !git commitall
	# Amend the currently staged files to the latest commit
	amend = "!f() { git commit -a --amend $([ ! -z "$1" ] && echo \"-m $1\" || echo \"--no-edit\"); }; f"
	an = !git amend
	# Amend all
	amendall = "!f() { git add -A && git commit -a --amend $([ ! -z "$1" ] && echo \"-m $1\" || echo \"--no-edit\"); }; f"
	ana = !git amendall
	# Change author of the last commit
	amendauthor = "!f() { git commit --amend --author \"${1:-$(git config --get user.name)} <${2:-$(git config --get user.email)}>\" -C HEAD; }; f"
	anu = !git amendauthor

	####################################
	# Add aliases
	####################################
	# Add all
	addall = !git add -A
	ada = !git addall

	####################################
	# Fetch aliases
	####################################
	# Shorter version
	fe = fetch
	# Fetch master
	fetchmaster = !git fetch $(git remote show) master
	fem = !git fetchmaster
	# Fetch branch
	fetchbranch = "!f() { git fetch $(git remote show) ${1:-$(git symbolic-ref --short HEAD)}; }; f"
	feb = !git fetchbranch

	####################################
	# Checkout aliases
	####################################
	# Shorter version
	co = checkout
	# Checkout master
	checkoutmaster = checkout master
	com = !git checkoutmaster
	# Checkout and pull changes
	checkoutsynced = "!f() { git checkout ${1:-master} && git pull; } f"
	cos = !git checkoutsynced

	####################################
	# Diff aliases
	# http://stackoverflow.com/questions/1587846/how-do-i-show-the-changes-which-have-been-staged
	####################################
	# Diff words only - easier to see changes
	diffwords = diff --color-words
	df = !git diffwords
	# Diff all tracked and untracked
	diffall = !git diff HEAD --color-words
	dfa = !git diffall
	# Diff tracked only
	difftracked = !git diff --cached --color-words
	dft = !git difftracked
	# Create a diff with binaries. Could be used with `git apply `
	diffpatch = !git diff HEAD --binary
	dfp = !git diffpatch

	####################################
	# Undo aliases
	# https://www.atlassian.com/git/tutorials/undoing-changes/git-clean
	####################################
	# Reverting all local and indexed changes
	undo = !git reset --hard && git clean -xf
	un = !git undo
	# Reverting all indexed changes
	undotracked = reset --hard
	unt = !git undotracked
	# Dropping all untracked files and directories
	undountracked = clean -xf
	unu = !git undountracked

	####################################
	# Finding aliases
	####################################
	# Customized alias for grep
	findfile = grep -Iin
	fnf = !git findfile
	# Find branches containing commit
	findbranch = "!f() { git branch -a --contains $1; }; f"
	fnb = !git findbranch
	# Find tags containing commit
	findtags = "!f() { git describe --always --contains $1; }; f"
	fnt = !git findtags
	# Find commits by content
	findcommit = "!f() { git log --pretty=custom --decorate -S$1 -i; }; f"
	fnc = !git findcommit
	# Find commits by commit message
	findcommitbymsg = "!f() { git log --pretty=custom --decorate --grep=\"$1\" -i; }; f"
	fncm = !git findcommitbymsg
	# Find alias implementation
	findalias = "!f() { git aliases | GREP_COLORS=\"mt=0;36\" grep --color=always \"^\\w*$1\\w*\" | GREP_COLORS=\"mt=01;34\" grep --color=auto \"=>\"; }; f"

	####################################
	# Listings aliases
	####################################
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	contributors = git log --all --format='%<(20)%aN <%cE>' | sort -u
	aliases = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1 => \\2/' | grep -v 'alias'| awk 'BEGIN { FS = \"=>\" }{ printf(\"%-20s=>%s\\n\", $1,$2)}'

	####################################
	# Rebase aliases
	####################################
	# Shorter version
	rb = rebase
	# Rebase remote branch
	rebaseremote = "!f() { git rebase $(git remote show)/${1:-$(git symbolic-ref --short HEAD)}; }; f"
	rbr = !git rebaseremote
	# Rebase remote master
	rebaseremotemaster = "!f() { git rebase $(git remote show)/master; }; f"
	rbrm = !git rebaseremotemaster

	####################################
	# Squash aliases
	####################################
	# For internal usage
	commitsaheadofupstream = !git rev-list --count --left-right @{upstream}...HEAD | cut -f2
	commitsonbranch = !git rev-list --count HEAD
	# Autmatically rebase with the given number of latest commits
	squash = "!f(){ git reset --soft HEAD~${1:-$(git commitsaheadofupstream)} && git commit --edit -m\"${2:-$(git log --format=%B --reverse HEAD..HEAD@{1} | awk '{print (NR > 1) ? \"# \" $0 : $0 \"\\n\" }')}\"; };f"
	sq = !git squash
	squashall = !git squash $(git commitsonbranch)
	# Interactive rebase with the given number of latest commits
	squashi = "!f() { git rebase -i $([ ! -z "$1" ] && echo \"HEAD~$1\"); }; f"
	sqi = !git squashi
	squashiall = "!f() { git rebase -i --root; }; f"

	####################################
	# Tag aliases
	####################################
	# Show last tag
	taglast = describe --tags --abbrev=0
	tgl = !git taglast
	# Remove the old tag with this name and tag the latest commit with it.
	tagretag = "!f() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; f"
	tgr = !git tagretag

	####################################
	# Github aliases
	####################################
	githubfetchpr = "!sh -c 'git fetch origin pull/$0/head:pr/$0'"
	githubpr = "!sh -c 'git fetch origin pull/$0/head:pr/$0 && git checkout pr/$0 && git pull'"



	####################################
	# Other aliases
	####################################
	# Show what is going on origin branches
	showorigin = "!sh -c 'git fetch && for branch in `git branch -r | grep -v HEAD`;do echo `git show -s --format=custom $branch | head -n 1` \\\t$branch; done | sort -r'"
	# Initialize git repo
	start = !git init && git add . && git commit -am \"Initial commit\"
	# Fix .gitignore
    fixgitignore = !git rm -r --cached . && git add . && git commit -m \"Just a .gitignore fix \"
	# Jira tickets (from: http://blogs.atlassian.com/2014/08/whats-new-git-2-1/)
    issues = "!f() { : git log ; echo 'Printing issue keys'; git log --oneline $@ | egrep -o [A-Z]+-[0-9]+ | sort | uniq; }; f"
	# Check if any file in repo has whitespace errors
    # As described in http://peter.eisentraut.org/blog/2014/11/04/checking-whitespace-with-git/
    checkwhitespaces = !git diff-tree --check $(git hash-object -t tree /dev/null) HEAD
	# Remove branches that have already been merged with master
	deletemergedbranches = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
[pretty]
	# See: https://git-scm.com/docs/git-log
	custom = format:"%C(magenta)%h%C(red)%d %C(cyan)%cd %C(blue)[%an] %C(yellow)%ar %C(green)%s"
